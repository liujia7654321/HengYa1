# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Home.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QThread

from PyQt5.QtCore import *
import serial
import serial.tools.list_ports
from array import array
from time import time
from tkinter.filedialog import asksaveasfilename
import tkinter as tk
import csv
import queue
from Page2 import Ui_Page2
from Page3 import Ui_Page3
from Page4 import Ui_Page4
import math

class Ui_MainWindow(object):
    global QZhongLiang
    global QElapsed
    global start
    global Address
    global Rec_array
    global startbit
    global length
    global IsStart
    global ChanData
    global ChanFen
    global No
    global ZhongLiang
    global GuoLvMianJI
    global GuoLvYaLi
    global SetGuoLvLiang
    global BianGuoLvLiang
    global Xlist
    global Ylist
    global Page2D
    global Page2
    global Page3D
    global Page3
    global Page4D
    global Page4
    global IsDealdata
    No = 1
    IsStart = False
    Rec_array = []
    startbit = False
    length = 0
    Xlist = []
    Ylist = []
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1307, 849)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Resource/icon/Format.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame_6 = QtWidgets.QFrame(self.centralwidget)
        self.frame_6.setGeometry(QtCore.QRect(0, 90, 341, 231))
        self.frame_6.setStyleSheet("")
        self.frame_6.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setLineWidth(2)
        self.frame_6.setObjectName("frame_6")
        self.label_23 = QtWidgets.QLabel(self.frame_6)
        self.label_23.setGeometry(QtCore.QRect(10, 19, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_23.setFont(font)
        self.label_23.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_23.setObjectName("label_23")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_6)
        self.pushButton_5.setGeometry(QtCore.QRect(100, 170, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet(" QPushButton {\n"
"color: #333;\n"
"border: 2px solid #3465a4;\n"
"font:bold 14pt \"Arial\";\n"
"text-align:center;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #888a85);\n"
"min-width: 80px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #898a88);\n"
"}\n"
"\n"
" QPushButton:pressed {\n"
"background: qradialgradient(cx: 0.4, cy: -0.1,\n"
"fx: 0.4, fy: -0.1,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #8a8a89);\n"
"}")
        self.pushButton_5.setObjectName("pushButton_5")
        self.comboBox = QtWidgets.QComboBox(self.frame_6)
        self.comboBox.setGeometry(QtCore.QRect(120, 20, 81, 31))
        self.comboBox.setObjectName("comboBox")
        self.label_24 = QtWidgets.QLabel(self.frame_6)
        self.label_24.setGeometry(QtCore.QRect(0, 120, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_24.setFont(font)
        self.label_24.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_24.setObjectName("label_24")
        self.plainTextEdit_5 = QtWidgets.QPlainTextEdit(self.frame_6)
        self.plainTextEdit_5.setGeometry(QtCore.QRect(120, 120, 61, 31))
        self.plainTextEdit_5.setObjectName("plainTextEdit_5")
        self.label_25 = QtWidgets.QLabel(self.frame_6)
        self.label_25.setGeometry(QtCore.QRect(10, 69, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_25.setFont(font)
        self.label_25.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_25.setObjectName("label_25")
        self.comboBox_2 = QtWidgets.QComboBox(self.frame_6)
        self.comboBox_2.setGeometry(QtCore.QRect(120, 70, 121, 31))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(480, 10, 371, 71))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setUnderline(True)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.frame_7 = QtWidgets.QFrame(self.centralwidget)
        self.frame_7.setGeometry(QtCore.QRect(0, 320, 341, 471))
        self.frame_7.setStyleSheet("")
        self.frame_7.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setLineWidth(2)
        self.frame_7.setObjectName("frame_7")
        self.label_7 = QtWidgets.QLabel(self.frame_7)
        self.label_7.setGeometry(QtCore.QRect(20, 30, 121, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.textEdit = QtWidgets.QTextEdit(self.frame_7)
        self.textEdit.setGeometry(QtCore.QRect(150, 20, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.label_8 = QtWidgets.QLabel(self.frame_7)
        self.label_8.setGeometry(QtCore.QRect(20, 90, 121, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.textEdit_2 = QtWidgets.QTextEdit(self.frame_7)
        self.textEdit_2.setGeometry(QtCore.QRect(150, 80, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.textEdit_2.setFont(font)
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_9 = QtWidgets.QLabel(self.frame_7)
        self.label_9.setGeometry(QtCore.QRect(300, 30, 41, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.frame_7)
        self.label_10.setGeometry(QtCore.QRect(300, 90, 41, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_13 = QtWidgets.QLabel(self.frame_7)
        self.label_13.setGeometry(QtCore.QRect(300, 150, 41, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.frame_7)
        self.label_14.setGeometry(QtCore.QRect(20, 150, 121, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.textEdit_4 = QtWidgets.QTextEdit(self.frame_7)
        self.textEdit_4.setGeometry(QtCore.QRect(150, 140, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.textEdit_4.setFont(font)
        self.textEdit_4.setObjectName("textEdit_4")
        self.textEdit_7 = QtWidgets.QTextEdit(self.frame_7)
        self.textEdit_7.setGeometry(QtCore.QRect(150, 260, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.textEdit_7.setFont(font)
        self.textEdit_7.setObjectName("textEdit_7")
        self.label_19 = QtWidgets.QLabel(self.frame_7)
        self.label_19.setGeometry(QtCore.QRect(300, 270, 41, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(self.frame_7)
        self.label_20.setGeometry(QtCore.QRect(300, 210, 41, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.frame_7)
        self.label_21.setGeometry(QtCore.QRect(20, 270, 121, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.textEdit_8 = QtWidgets.QTextEdit(self.frame_7)
        self.textEdit_8.setGeometry(QtCore.QRect(150, 200, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.textEdit_8.setFont(font)
        self.textEdit_8.setObjectName("textEdit_8")
        self.label_22 = QtWidgets.QLabel(self.frame_7)
        self.label_22.setGeometry(QtCore.QRect(20, 210, 121, 26))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.pushButton = QtWidgets.QPushButton(self.frame_7)
        self.pushButton.setGeometry(QtCore.QRect(190, 330, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet(" QPushButton {\n"
"color: #333;\n"
"border: 2px solid #3465a4;\n"
"font:bold 14pt \"Arial\";\n"
"text-align:center;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #888a85);\n"
"min-width: 80px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #898a88);\n"
"}\n"
"\n"
" QPushButton:pressed {\n"
"background: qradialgradient(cx: 0.4, cy: -0.1,\n"
"fx: 0.4, fy: -0.1,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #8a8a89);\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_7 = QtWidgets.QPushButton(self.frame_7)
        self.pushButton_7.setGeometry(QtCore.QRect(190, 400, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet(" QPushButton {\n"
"color: #333;\n"
"border: 2px solid #3465a4;\n"
"font:bold 14pt \"Arial\";\n"
"text-align:center;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #888a85);\n"
"min-width: 80px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #898a88);\n"
"}\n"
"\n"
" QPushButton:pressed {\n"
"background: qradialgradient(cx: 0.4, cy: -0.1,\n"
"fx: 0.4, fy: -0.1,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #8a8a89);\n"
"}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame_7)
        self.pushButton_8.setGeometry(QtCore.QRect(20, 400, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setStyleSheet(" QPushButton {\n"
"color: #333;\n"
"border: 2px solid #3465a4;\n"
"font:bold 14pt \"Arial\";\n"
"text-align:center;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #888a85);\n"
"min-width: 80px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #898a88);\n"
"}\n"
"\n"
" QPushButton:pressed {\n"
"background: qradialgradient(cx: 0.4, cy: -0.1,\n"
"fx: 0.4, fy: -0.1,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #8a8a89);\n"
"}")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_7)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 330, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet(" QPushButton {\n"
"color: #333;\n"
"border: 2px solid #3465a4;\n"
"font:bold 14pt \"Arial\";\n"
"text-align:center;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #888a85);\n"
"min-width: 80px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #898a88);\n"
"}\n"
"\n"
" QPushButton:pressed {\n"
"background: qradialgradient(cx: 0.4, cy: -0.1,\n"
"fx: 0.4, fy: -0.1,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #8a8a89);\n"
"}")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(690, 730, 201, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet(" QPushButton {\n"
"color: #333;\n"
"border: 2px solid #3465a4;\n"
"font:bold 14pt \"Arial\";\n"
"text-align:center;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #888a85);\n"
"min-width: 80px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #898a88);\n"
"}\n"
"\n"
" QPushButton:pressed {\n"
"background: qradialgradient(cx: 0.4, cy: -0.1,\n"
"fx: 0.4, fy: -0.1,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #8a8a89);\n"
"}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(390, 730, 201, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet(" QPushButton {\n"
"color: #333;\n"
"border: 2px solid #3465a4;\n"
"font:bold 14pt \"Arial\";\n"
"text-align:center;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #888a85);\n"
"min-width: 80px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #898a88);\n"
"}\n"
"\n"
" QPushButton:pressed {\n"
"background: qradialgradient(cx: 0.4, cy: -0.1,\n"
"fx: 0.4, fy: -0.1,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #8a8a89);\n"
"}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(990, 730, 201, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setStyleSheet(" QPushButton {\n"
"color: #333;\n"
"border: 2px solid #3465a4;\n"
"font:bold 14pt \"Arial\";\n"
"text-align:center;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #888a85);\n"
"min-width: 80px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"background: qradialgradient(cx: 0.3, cy: -0.4,\n"
"fx: 0.3, fy: -0.4,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #898a88);\n"
"}\n"
"\n"
" QPushButton:pressed {\n"
"background: qradialgradient(cx: 0.4, cy: -0.1,\n"
"fx: 0.4, fy: -0.1,\n"
"radius: 1.89, stop: 0 #fff, stop: 1 #8a8a89);\n"
"}")
        self.pushButton_6.setObjectName("pushButton_6")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(340, 80, 961, 631))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.tableWidget = QtWidgets.QTableWidget(self.groupBox)
        self.tableWidget.setGeometry(QtCore.QRect(10, 20, 941, 601))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.tableWidget.setFont(font)
        self.tableWidget.setFrameShape(QtWidgets.QFrame.Box)
        self.tableWidget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.tableWidget.setLineWidth(2)
        self.tableWidget.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tableWidget.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tableWidget.setAlternatingRowColors(False)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1307, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "首页"))
        self.label_23.setText(_translate("MainWindow", "端口："))
        self.pushButton_5.setText(_translate("MainWindow", "打开串口"))
        self.label_24.setText(_translate("MainWindow", "设备地址："))
        self.plainTextEdit_5.setPlainText(_translate("MainWindow", "01"))
        self.label_25.setText(_translate("MainWindow", "波特率："))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "4800"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "9600"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "19200"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "38400"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "115200"))
        self.label.setText(_translate("MainWindow", "恒压过滤数据处理软件V1.0"))
        self.label_7.setText(_translate("MainWindow", "过滤面积："))
        self.label_8.setText(_translate("MainWindow", "过滤压力："))
        self.label_9.setText(_translate("MainWindow", "m²"))
        self.label_10.setText(_translate("MainWindow", "MPa"))
        self.label_13.setText(_translate("MainWindow", "Kg"))
        self.label_14.setText(_translate("MainWindow", "设定过滤量："))
        self.label_19.setText(_translate("MainWindow", "s"))
        self.label_20.setText(_translate("MainWindow", "Kg"))
        self.label_21.setText(_translate("MainWindow", "过滤时间："))
        self.label_22.setText(_translate("MainWindow", "滤液重量："))
        self.pushButton.setText(_translate("MainWindow", "开始实验"))
        self.pushButton_7.setText(_translate("MainWindow", "生成表格"))
        self.pushButton_8.setText(_translate("MainWindow", "清空列表"))
        self.pushButton_2.setText(_translate("MainWindow", "置 0"))
        self.pushButton_4.setText(_translate("MainWindow", "压缩指数表"))
        self.pushButton_3.setText(_translate("MainWindow", "Δθ/Δq-q曲线图"))
        self.pushButton_6.setText(_translate("MainWindow", "lgK-lgΔP曲线图"))
        self.groupBox.setTitle(_translate("MainWindow", "实时数据列表"))

    def init(self):
        global QZhongLiang
        global QElapsed
        # lgK = math.log(0.0000000000000000045)
        QZhongLiang = queue.Queue(maxsize=3)
        QElapsed = queue.Queue(maxsize=3)
        # 打开串口按钮
        self.pushButton_5.clicked.connect(self.port_openOrclose)
        # 开始按钮
        self.pushButton.clicked.connect(self.Test)
        # 导出csv按钮
        self.pushButton_7.clicked.connect(self.handleSave)
        # 清空列表
        self.pushButton_8.clicked.connect(self.InitTableWidget)
        # 置0
        self.pushButton_2.clicked.connect(self.Set_0)
        # 定时发送数据
        self.timer_send = QTimer()
        self.timer_send.timeout.connect(self.data_send)
        # 定时器接收数据
        self.timer_rec = QTimer()
        self.timer_rec.timeout.connect(self.data_receive)
        self.ser = serial.Serial()
        self.port_check()
        self.comboBox_2.setCurrentIndex(1)
        # 接收数据和发送数据数目置零
        self.data_num_received = 0
        self.data_num_sended = 0
        self.InitTableWidget()
        global Page2D
        global Page2
        Page2D = Ui_Page2()
        Page2 = QDialog()
        Page2D.setupUi(Page2)
        Page2.setWindowFlags(QtCore.Qt.Window)
        Page2D.init()
        # 页面2按钮
        self.pushButton_3.clicked.connect(Page2.show)

        global Page3D
        global Page3
        Page3D = Ui_Page3()
        Page3 = QDialog()
        Page3D.setupUi(Page3)
        Page3.setWindowFlags(QtCore.Qt.Window)
        Page3D.init()
        # 生成曲线
        Page3D.pushButton_8.clicked.connect(self.SetWive)
        # 页面2按钮
        self.pushButton_4.clicked.connect(Page3.show)
        global Page4D
        global Page4
        Page4D = Ui_Page4()
        Page4 = QDialog()
        Page4D.setupUi(Page4)
        Page4.setWindowFlags(QtCore.Qt.Window)
        Page4D.init()
        # 页面2按钮
        self.pushButton_6.clicked.connect(Page4.show)

    def SetWive(self):
        xl,yl = Page3D.Page3SetWive()
        Page4D.AddLine(xl, yl)
        global Page4
        Page4.show()


    def Test(self):
        global Xlist
        global Ylist
        global GuoLvYaLi
        global IsStart
        if IsStart:
            global QZhongLiang
            global QElapsed
            try:
                #设定的过滤压力
                strtemp = str(GuoLvYaLi) + "MPa"
                A1, B1, K, qe, Qe = Page2D.AddLine(Xlist, Ylist, str(strtemp))
                try:
                    lgK = math.log(K, 10)
                    print("lgK=" + str(lgK))
                except:
                    msgBox1 = QtWidgets.QMessageBox()
                    A = msgBox1.question(msgBox1, '确认', 'lgK数据不足无法拟合曲线，请继续测量，是否要继续测量？', QMessageBox.Yes | QMessageBox.No)
                    if A == QMessageBox.Yes:
                        return
                    else:
                        self.timer_send.stop()
                        IsStart = False
                        self.pushButton.setText("开 始")
                        while not QZhongLiang.empty():
                            QZhongLiang.get()
                        while not QElapsed.empty():
                            QElapsed.get()
                global Page3D
                L = []
                L.append(round(A1, 1))
                L.append(round(B1, 2))
                L.append(round(float(GuoLvYaLi) * 1000000, 0))
                L.append(round(K, 5))
                L.append(round(qe, 9))
                L.append(round(Qe, 1))
                lgGuoLvYaLi = math.log(float(GuoLvYaLi) * 1000000)
                print("lgGuoLvYaLi=" + str(lgGuoLvYaLi))
                L.append(round(lgGuoLvYaLi, 4))
                L.append(round(lgK, 4))
                Page3D.AddTableWidget(L)
                msgBox = QtWidgets.QMessageBox()
                msgBox.information(msgBox, "提示", "拟合" + strtemp + "曲线成功！")
            except Exception as e:
                print(e)
            self.timer_send.stop()
            IsStart = False
            self.pushButton.setText("开 始")
            while not QZhongLiang.empty():
                QZhongLiang.get()
            while not QElapsed.empty():
                QElapsed.get()
        else:
            Xlist.clear()
            Ylist.clear()
            self.GlobalReset()
            global IsDealdata
            IsDealdata = True
            if not self.ser.isOpen():
                msgBox = QtWidgets.QMessageBox()
                msgBox.critical(msgBox, "串口错误", "串口未打开！")
                return
            else:
                str1 = self.textEdit.toPlainText()
                try:
                    tempf = float(str1)
                except:
                    msgBox = QtWidgets.QMessageBox()
                    msgBox.critical(msgBox, "错误", "过滤面积输入错误！")
                    return
                global GuoLvMianJI
                GuoLvMianJI = str1
                str1 = self.textEdit_2.toPlainText()
                try:
                    tempf = float(str1)
                except:
                    msgBox = QtWidgets.QMessageBox()
                    msgBox.critical(msgBox, "错误", "过滤压力输入错误！")
                    return
                GuoLvYaLi = str1
                str1 = self.textEdit_4.toPlainText()
                try:
                    tempf = float(str1)
                except:
                    msgBox = QtWidgets.QMessageBox()
                    msgBox.critical(msgBox, "错误", "设定过滤量输入错误！")
                    return
                global SetGuoLvLiang
                SetGuoLvLiang = tempf
                global BianGuoLvLiang
                #设定一次新的测试开始 变化的设定重量归0
                BianGuoLvLiang = 0.0
            self.timer_send.start(200)
            IsStart = True
            self.InitTableWidget()
            self.pushButton.setText("停 止")
            self.StartElapsed()

    def StartElapsed(self):
        global start
        start = time()
        print("Start: " + str(start))

    def GetElapsed(self):
        global start
        Elapsed = time() - start
        print(str(Elapsed) + "秒")
        return Elapsed

    def InitTableWidget(self):
        self.tableWidget.clear()
        self.tableWidget.setRowCount(0)
        self.tableWidget.clearContents()
        self.tableWidget.setShowGrid(True)
        self.tableWidget.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        L = []
        L.append("序号")
        L.append("过滤重量(Kg)")
        L.append("过滤时间(s)")
        L.append("间隔时间(s)")
        L.append("单位面积滤液通量(m³/m²)")
        L.append("平均滤液通量(m³/m²)")
        self.tableWidget.setColumnCount(len(L))
        self.tableWidget.setHorizontalHeaderLabels(L)
        self.tableWidget.setColumnWidth(0, 100)
        self.tableWidget.setColumnWidth(1, 152)
        self.tableWidget.setColumnWidth(2, 140)
        self.tableWidget.setColumnWidth(3, 140)
        self.tableWidget.setColumnWidth(4, 190)
        self.tableWidget.setColumnWidth(5, 190)

    def GlobalReset(self):
        global Rec_array
        global startbit
        global length
        startbit = False
        length = 0
        Rec_array.clear()


    def port_openOrclose(self):
        self.GlobalReset()
        if self.pushButton_5.text() == "打开串口":
            self.port_open()
        else:
            self.port_close()

        # 串口检测

    def port_check(self):
        # 检测所有存在的串口，将信息存储在字典中
        self.Com_Dict = {}
        port_list = list(serial.tools.list_ports.comports())
        self.comboBox.clear()
        for port in port_list:
            self.Com_Dict["%s" % port[0]] = "%s" % port[1]
            self.comboBox.addItem(port[0])

        # 打开串口

    def port_open(self):
        global Address
        self.ser.port = self.comboBox.currentText()
        self.ser.baudrate = self.comboBox_2.currentText()
        self.ser.bytesize = 8
        self.ser.stopbits = 1
        self.ser.parity = "N"
        Address = self.plainTextEdit_5.toPlainText()
        try:
            self.ser.open()
        except:
            msgBox = QtWidgets.QMessageBox()
            msgBox.critical(msgBox, "Port Error", "串口未打开！")
            return None
        # 打开串口接收定时器，周期为2ms
        self.timer_rec.start(20)
        if self.ser.isOpen():
            self.pushButton_5.setText("关闭串口")
            msgBox = QtWidgets.QMessageBox()
            msgBox.information(msgBox, "提示", "串口状态（已开启）")
            self.comboBox.setEnabled(False)
            self.comboBox_2.setEnabled(False)
            self.plainTextEdit_5.setEnabled(False)

        # 关闭串口

    def port_close(self):
        global IsStart
        self.timer_rec.stop()
        self.timer_send.stop()
        try:
            if IsStart:
                self.timer_send.stop()
                IsStart = False
                self.pushButton_2.setText("开 始")
            self.ser.close()
        except:
            pass
        self.pushButton_5.setText("打开串口")
        msgBox = QtWidgets.QMessageBox()
        msgBox.information(msgBox, "提示", "串口状态（已关闭）")
        self.comboBox.setEnabled(True)
        self.comboBox_2.setEnabled(True)
        self.plainTextEdit_5.setEnabled(True)
        # 接收数据和发送数据数目置零
        self.data_num_received = 0
        self.data_num_sended = 0

        # ===============================================================

    def CalCRC16(self, data, length):
        # print(data, length)                          #打印数据，长度
        crc = 0xFFFF
        if length == 0:
            length = 1
        for j in range(0, length):
            crc ^= list.__getitem__(data, j)
            # print('j=0x%02x, length=0x%02x, crc=0x%04x' %(j,length,crc))
            for i in range(0, 8):
                if crc & 1:
                    crc >>= 1
                    crc ^= 0xA001
                else:
                    crc >>= 1
        return crc

        # ===============================================================

    def CRCBuffer(self, buffer):
        crc_transformation = self.CalCRC16(buffer, len(buffer))
        # crc_calculation = hex(crc_transformation)
        # print('crc_calculation:',crc_calculation)
        tasd = [0x00, 0x00]
        tasd[0] = crc_transformation & 0xFF
        tasd[1] = (crc_transformation >> 8) & 0xFF
        H = hex(tasd[0])
        L = hex(tasd[1])
        H_value = int(H, 16)
        L_value = int(L, 16)
        buffer.append(H_value)
        buffer.append(L_value)
        return buffer

        # 发送数据

    def data_send(self):
        if not self.ser.isOpen():
            return
        global Address
        list = [int(Address), 0x03, 0x00, 0x05, 0x00, 0x02]
        listcrc = self.CRCBuffer(list)
        arr = array('B',listcrc)

        self.ser.write(arr)

        # 单独一个按钮清0操作
    def Set_0(self):
        if not self.ser.isOpen():
                return
        global Address
        list = [int(Address), 0x06, 0x00, 0x00, 0x00, 0x00]
        listcrc = self.CRCBuffer(list)
        arr = array('B', listcrc)
        # 清0操作，不处理回应数据
        self.ser.write(arr)
        QThread.msleep(200)
        global IsDealdata
        # 并非为真正的实验数据，只是清0后看看清0后是否已经为0
        IsDealdata = False
        self.data_send()
        # 接收数据

    def data_receive(self):
        global Rec_array
        global startbit
        global length
        try:
            num = self.ser.inWaiting()
        except:
            self.port_close()
            return None
        if num > 0:
            data = self.ser.read(num)
            num = len(data)
            if startbit == False:
                global Address
                if data[0] == int(Address):  # 开始
                    startbit = True
                    Rec_array += data
                    length += len(data)
                else:
                    Rec_array.clear()
            else:
                Rec_array += data
                length += len(data)
            if length > 5:
                crc_transformation = self.CalCRC16(list(Rec_array)[0:length - 2], length - 2)
                tasd = [0x00, 0x00]
                tasd[0] = crc_transformation & 0xFF
                tasd[1] = (crc_transformation >> 8) & 0xFF
                H = hex(tasd[0])
                L = hex(tasd[1])
                H_value = int(H, 16)
                L_value = int(L, 16)
                if data[num - 1] == L_value and data[num - 2] == H_value \
                        and length == 9:  # 结束
                    # 真正的解析
                    self.JieXi()
                else:
                    pass
            if length >= 9:
                self.GlobalReset()
            elif length > 2 and Rec_array[2] != 0x04:
                self.GlobalReset()
            elif length > 1 and Rec_array[1] != 0x05:
                self.GlobalReset()
            else:
                pass
        else:
            pass

    def AddTableWidget(self, L=[]):
        num = self.tableWidget.rowCount()
        self.tableWidget.setRowCount(num + 1)
        list = []
        list.append(num + 1)
        list += L
        try:
            for i in range(0, len(list)):
                newItem = QTableWidgetItem(str(list[i]))
                newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                self.tableWidget.setItem(num, i, newItem)
        except Exception as e:
            print(e)

    def handleSave(self):
        root = tk.Tk()
        root.withdraw()
        filepath = asksaveasfilename()
        path = filepath + '.csv'
        if filepath:
            file = open(path, 'w', encoding='utf-8', newline='' "")
            writer = csv.writer(file)
            L = []
            L.append("序号")
            L.append("过滤重量(Kg)")
            L.append("过滤时间(s)")
            L.append("间隔时间(s)")
            L.append("单位面积滤液通量(m³/m²)")
            L.append("平均滤液通量(m³/m²)")
            writer.writerow(L)
            for row in range(self.tableWidget.rowCount()):
                rowdata = []
                for column in range(self.tableWidget.columnCount()):
                    item = self.tableWidget.item(row, column)
                    if item is not None:
                        rowdata.append(item.text())
                    else:
                        rowdata.append('')
                writer.writerow(rowdata)
            file.close()

        # 数据解析

    def Queue2List(self,q):
        QtempL = []
        for i in range(q.qsize()):
            QtempL.append(q.get())
        for i in range(len(QtempL)):
            q.put(QtempL[i])
        return QtempL

    def JieXi(self):
        global Rec_array
        global length
        global QZhongLiang
        global QElapsed
        global ZhongLiang
        global Xlist
        global Ylist
        global Page2D
        FenDuarr = [0, 0, 0, 0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1, 2, 5]
        state = (Rec_array[3] >> 4) & 0xf
        d = FenDuarr[state] * (float)(Rec_array[4] << 16 | Rec_array[5] << 8 | Rec_array[6])
        # 以第三组为例
        if (Rec_array[3] & 0x4) == 0:
            ZhongLiang = d
        else:
            ZhongLiang = (-1.0) * d
        # 显示实时重量值
        self.textEdit_8.setText(str(round(ZhongLiang, 2)))
        global IsDealdata
        if not IsDealdata:
            return
        Elapsed = self.GetElapsed()
        # 显示时间
        self.textEdit_7.setText(str(round(Elapsed, 1)))
        global BianGuoLvLiang
        global GuoLvMianJI
        global GuoLvYaLi
        global SetGuoLvLiang
        if ZhongLiang >= BianGuoLvLiang:
            # 如果满了
            if QZhongLiang.full():
                QZhongLiang.get()
            QZhongLiang.put(BianGuoLvLiang)
            if QElapsed.full():
                QElapsed.get()
            QElapsed.put(Elapsed)
            # 变化的设定递增
            BianGuoLvLiang += SetGuoLvLiang
            if not QZhongLiang.full():
                return
            if not QElapsed.full():
                return
            QZhongLiangL = self.Queue2List(QZhongLiang)
            QElapsedL = self.Queue2List(QElapsed)
            Liststrs = []
            # 重量
            Liststrs.append(round(QZhongLiangL[1], 3))
            # 累积测试时间
            Liststrs.append(round(QElapsedL[1], 1))
            ElapsedCha = QElapsedL[2] - QElapsedL[1]
            # 间隔时间
            Liststrs.append(round(ElapsedCha, 1))
            # 设定面积为分母不可为0
            print("设定面积" + str(GuoLvMianJI)+"，不可为0！")
            q2 = (QZhongLiangL[1] * 0.001) / float(GuoLvMianJI)
            print("q2="+str(q2))
            Liststrs.append(round(q2, 5))
            q3 = (QZhongLiangL[2] * 0.001) / float(GuoLvMianJI)
            print("q3=" + str(q3))
            q2q3avg = (q2 + q3) * 0.5
            Liststrs.append(round(q2q3avg, 5))
            self.AddTableWidget(Liststrs)
            global Xlist
            global Ylist
            Xlist.append(q2q3avg)
            qshe = (SetGuoLvLiang * 0.001) / float(GuoLvMianJI)
            print("qshe=" + str(qshe))
            Ylist.append(ElapsedCha / float(qshe))